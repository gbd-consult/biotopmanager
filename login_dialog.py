# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BiotopManagerDialog
                                 A QGIS plugin
 Dieses Plugin verwaltet Biotope
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-06-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by GBD GmbH
        email                : gebbert@gbd-consult.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import traceback
import pprint

from PyQt5 import uic, QtCore
from PyQt5 import QtWidgets

from qgis.core import QgsProject

from biotopmanager.common.user_credentials import PostgresUser
from biotopmanager.common.database_connection import DatabaseConnection
from biotopmanager.common.configuration import Configuration
from biotopmanager.common.layer_manager import LayerManager

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'assets', 'ui', 'login_dialog.ui'))


class LoginDialog(QtWidgets.QDialog, FORM_CLASS):
    """Login dialog that sets up the database connection and loads the layers

    """
    def __init__(self, iface, parent=None):
        super(LoginDialog, self).__init__(parent)

        self.iface = iface
        self.setupUi(self)

        self.pushButtonCancel.clicked.connect(self.close)
        self.pushButtonLogin.clicked.connect(self.login)

    def login(self):
        """Read user name and password to login
        """

        self.setCursor(QtCore.Qt.WaitCursor)

        try:
            if self.radioButton_2.isChecked():
                input_user = self.lineEditUser.text()
                input_password = self.lineEditPassword.text()
                input_host = self.lineEditHost.text()
                input_port = self.lineEditPort.text()
                input_database = self.lineEditDB.text()
                pguser = PostgresUser()
                pguser.user_id = input_user
                pguser.password = input_password

                #index = self.comboBoxDatenbank.currentIndex()

                #config = Configuration()
                dbconn = DatabaseConnection()

                dbconn.set_connection(host=input_host, port=input_port, db=input_database)
                #if index == 0:
                #dbconn.set_connection(host=config.default_host, port=config.default_port, db=config.default_db)
                #else:
                #    dbconn.set_connection(host=config.develop_host, port=config.develop_port, db=config.develop_db)

                dbconn.set_user_password(user=pguser.user_id, password=pguser.password)
                dbconn.connect()
            elif self.radioButton.isChecked():
                pass
            else:
                QtWidgets.QMessageBox.critical(self, "Fehler", "Kein Login ausgewählt.")

            self._load_layers()
        except Exception as e:
            e_type, e_value, e_traceback = sys.exc_info()
            mobj = [e.__class__, e_type, e_value, traceback.format_tb(e_traceback)]
            message = pprint.pformat(mobj)
            QtWidgets.QMessageBox.critical(self, "Fehler", str(message))
            #QtWidgets.QMessageBox.critical(self, "Fehler", "Login war nicht erfolgreich, bitte überprüfen Sie Ihre Daten.")
        finally:
            self.setCursor(QtCore.Qt.ArrowCursor)
            self.close()

    def _load_layers(self):
        """Load all required layers into the layer manager
        """
        lm = LayerManager()
        lm.show_biotope_layers(iface=self.iface)
        lDEC = QgsProject.instance().mapLayersByName('biotoptypen')[0]
        lDEC.setDisplayExpression("name_2012")
        del(lDEC)
