# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BiotopManager
                                 A QGIS plugin
 Dieses Plugin verwaltet Biotope
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by GeoinformatikbÃ¼ro Dassau GmbH
        email                : info@gbd-consult.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import shutil
from typing import List, Optional
from qgis.core import QgsApplication
from biotopmanager.common.singleton import Singleton
import biotopmanager


class Configuration(metaclass=Singleton):
    """This is the configuration of the biotope plugin

    >>> config = Configuration()
    >>> config.lock_table
    'locks'

    """

    def __init__(self):
        self._bitotope_schema = "biotope"
        self._history_schema = "historie"
        self._references_schema = "referenzen"
        self._biotope_table_name = "biotope"
        self._historie_table_name = "biotope_historie"
        self._biotope_primary_key = "ogc_fid"
        self._history_primary_key = "revision"
        self._biotope_identifier = "objnr"
        self._biotope_geometry_column = "wkb_geometry"
        self._lock_table = "locks"

        self._biotop_deleted_schema = "historie"
        self._biotop_deleted_table_name = "biotope_deleted_features"

        self._locked_biotope_view_name = "locked_biotope"
        self._locked_biotope_layer_name = "Gesperrte Biotope"
        self._locked_biotope_style_path = os.path.join(os.path.dirname(biotopmanager.__file__),
                                                       "assets", "styles", "biotope_lock.qml")

        self._locked_biotope_ui_path = os.path.join(os.path.dirname(biotopmanager.__file__),
                                                    "assets", "ui", "biotope_lock.ui")

        self._reference_tables = ["aenderungen", "beeintraechtigungen", "biotoptypen", 
                                  "kartierer", "massnahmen", "pflege", "schutzstatus", "erhaltungszustand"]

        self._reference_table_id_columns = ["id", "id", "nummer", 
                                            "id", "id", "nummer",  "id", "id"]

        self._reference_table_value_columns = ["aenderung", "beeintraechtigungen", "name_2012", 
                                               "kartierer", "massnahme", "name", "wert", "wert"]

        self._mapped_columns = {"pflege": {"table": "massnahmen", "key": "id", "value": "massnahme"},
                                "biotoptyp_art_nr": {"table": "biotoptypen", "key": "nummer", "value": "name_2002"},
                                "biotoptyp2_art_nr": {"table": "biotoptypen", "key": "nummer", "value": "name_2012"}
                                }

        self._biotop_layer_name = "Biotope"
        self._biotop_layer_style_path = os.path.join(os.path.dirname(biotopmanager.__file__),
                                                     "assets", "styles", "biotope.qml")
        self._biotop_layer_ui_path = os.path.join(os.path.dirname(biotopmanager.__file__),
                                                  "assets", "ui", "biotope_formular.ui")

        self._biotop_edit_layer_name = "Biotope Bearbeitungslayer"
        self._biotop_edit_layer_style_path = os.path.join(os.path.dirname(biotopmanager.__file__),
                                                          "assets", "styles", "biotope_edit.qml")
        self._biotop_deleted_layer_name = "Archivierte Biotope"
        self._biotop_deleted_layer_style_path = os.path.join(os.path.dirname(biotopmanager.__file__),
                                                             "assets", "styles", "biotope_delete.qml")

        self._history_layer_name = "Biotope Historie"

        self._biotoptyp_table = "biotoptypen"

        #self._default_host = "localhost"
        #self._default_port = 5432
        #self._default_db = "biotope"
        #self._default_user = "biotope_user"
        #self._default_password = "biotope_user"

        #self._develop_host = "localhost"
        #self._develop_port = 5432
        #self._develop_db = "biotope"
        #self._develop_user = "biotope_admin"
        #self._develop_password = "biotope_admin"

        '''Workaround so the Plugin works while installed as a Core
        Plugin without rights to write, in that folder.
        '''

        self.qgis_folder = QgsApplication.qgisSettingsDirPath()
        self.folder_name = 'biotop_write'
        self._biotop_write_folder = os.path.join(self.qgis_folder, self.folder_name)
        os.makedirs(self._biotop_write_folder, exist_ok=True)

        self._biotop_layer_style_path_2 = os.path.join(self._biotop_write_folder, "biotope.qml")
        self._biotop_deleted_layer_style_path_2 = os.path.join(self._biotop_write_folder, "biotope_delete.qml")
        self._biotop_edit_layer_style_path_2 = os.path.join(self._biotop_write_folder, "biotope_edit.qml")
        self._locked_biotope_style_path_2 = os.path.join(self._biotop_write_folder, "biotope_lock.ui")

        shutil.copyfile(self._biotop_layer_style_path, self._biotop_layer_style_path_2)
        shutil.copyfile(self._biotop_deleted_layer_style_path, self._biotop_deleted_layer_style_path_2)
        shutil.copyfile(self._biotop_edit_layer_style_path, self._biotop_edit_layer_style_path_2)
        shutil.copyfile(self._locked_biotope_style_path, self._locked_biotope_style_path_2)

        self._biotop_layer_style_path = self._biotop_layer_style_path_2
        self._biotop_deleted_layer_style_path = self._biotop_deleted_layer_style_path_2
        self._biotop_edit_layer_style_path = self._biotop_edit_layer_style_path_2
        self._locked_biotope_style_path = self._locked_biotope_style_path_2



    @property
    def biotope_schema(self) -> str:
        return self._bitotope_schema

    @property
    def history_schema(self) -> str:
        return self._history_schema

    @property
    def biotop_deleted_schema(self) -> str:
        return self._biotop_deleted_schema

    @property
    def history_primary_key(self) -> str:
        return self._history_primary_key

    @property
    def references_schema(self) -> str:
        return self._references_schema

    @property
    def biotope_table_name(self) -> str:
        return self._biotope_table_name

    @property
    def historie_table_name(self) -> str:
        return self._historie_table_name

    @property
    def biotop_deleted_table_name(self) -> str:
        return self._biotop_deleted_table_name

    @property
    def biotope_primary_key(self) -> str:
        return self._biotope_primary_key

    @property
    def biotope_identifier(self) -> str:
        return self._biotope_identifier

    @property
    def biotope_geometry_column(self) -> str:
        return self._biotope_geometry_column

    @property
    def lock_table(self) -> str:
        return self._lock_table

    @property
    def biotop_layer_name(self) -> str:
        return self._biotop_layer_name

    @property
    def history_layer_name(self) -> str:
        return self._history_layer_name

    @property
    def biotop_layer_style_path(self) -> str:
        return self._biotop_layer_style_path

    @property
    def biotop_layer_ui_path(self) -> str:
        return self._biotop_layer_ui_path

    @property
    def biotop_edit_layer_name(self) -> str:
        return self._biotop_edit_layer_name

    @property
    def biotop_edit_layer_style_path(self) -> str:
        return self._biotop_edit_layer_style_path

    @property
    def biotop_deleted_layer_name(self) -> str:
        return self._biotop_deleted_layer_name

    @property
    def biotop_deleted_layer_style_path(self) -> str:
        return self._biotop_deleted_layer_style_path

    @property
    def locked_biotope_view_name(self) -> str:
        return self._locked_biotope_view_name

    @property
    def locked_biotope_layer_name(self) -> str:
        return self._locked_biotope_layer_name

    @property
    def locked_biotope_style_path(self) -> str:
        return self._locked_biotope_style_path

    @property
    def locked_biotope_ui_path(self) -> str:
        return self._locked_biotope_ui_path

    @property
    def reference_tables(self) -> List[str]:
        return self._reference_tables

    @property
    def reference_table_id_columns(self) -> List[str]:
        return self._reference_table_id_columns

    @property
    def reference_table_value_columns(self) -> List[str]:
        return self._reference_table_value_columns

    @property
    def biotoptyp_table(self) -> str:
        return self._biotoptyp_table

    @property
    def mapped_columns(self) -> dict:
        return self._mapped_columns

    @property
    def default_host(self) -> str:
        return self._default_host

    @property
    def default_port(self) -> int:
        return self._default_port

    @property
    def default_db(self) -> str:
        return self._default_db

    @property
    def default_user(self) -> str:
        return self._default_user

    @property
    def default_password(self) -> str:
        return self._default_password

    @property
    def develop_host(self) -> str:
        return self._develop_host

    @property
    def develop_port(self) -> int:
        return self._develop_port

    @property
    def develop_db(self) -> str:
        return self._develop_db

    @property
    def develop_user(self) -> str:
        return self._develop_user

    @property
    def develop_password(self) -> str:
        return self._develop_password


if __name__ == "__main__":
    import doctest

    doctest.testmod()
