# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BiotopManager
                                 A QGIS plugin
 Dieses Plugin verwaltet Biotope
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by GBD GmbH
        email                : gebbert@gbd-consult.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import csv
import tempfile
import webbrowser
from shutil import copyfile

from PyQt5 import QtWidgets, Qt
from qgis.core import QgsVectorLayer, QgsFeature, QgsProject
from qgis.PyQt.QtWidgets import QDialog, QTableWidget, QTableWidgetItem
from biotopmanager.common.database_connection import DatabaseConnection
from biotopmanager.common.configuration import Configuration
from biotopmanager.common.user_credentials import PostgresUser
from biotopmanager.common.biotope_model import BiotopeModel, BiotopOrigin
from biotopmanager.common.utils.pdf_export import convert_html_to_pdf
from biotopmanager import common


def biotop_dialog_generator(dialog: QDialog, layer: QgsVectorLayer, feature: QgsFeature) -> None:
    """In this function the biototp attribute dialog will be extended with data from
    the feature geometry and the database

    The export for CSV and PDF is implemented as well as the massnahmen selection

    Args:
        dialog: The attribute dialog
        layer: The vector layer
        feature: The feature

    """

    if not layer:
        return

    # Check for empty or invalid features
    if not feature:
        return

    conn = DatabaseConnection()
    conf = Configuration()
    user = PostgresUser()
    bm = BiotopeModel()

    columns = list()
    attributes = list()
    tabWidget: QtWidgets.QTabWidget = dialog.findChild(QtWidgets.QTabWidget, "tabWidget")

    if tabWidget and feature.id() != 0:
        if layer.name() == conf.biotop_layer_name:
            attributes, columns = bm.get_mapped_attributes(ogc_fid=feature.id(), origin=BiotopOrigin.PUBLIC)
        if layer.name() == conf.biotop_edit_layer_name:
            attributes, columns = bm.get_mapped_attributes(ogc_fid=feature.id(), origin=BiotopOrigin.TEMPORARY)
        if layer.name() == conf.history_layer_name:
            attributes, columns = bm.get_mapped_attributes(ogc_fid=feature.id(), origin=BiotopOrigin.HISTORY)

    def generate_html() -> str:
        """Fill the csv table widget with the data of the current feature
        """
        html_path = os.path.join(os.path.dirname(common.__file__), "gui")
        os.chdir(html_path)
        html_file = os.path.join(os.path.dirname(common.__file__), "gui", "Biotopformular.htm")
        html_content = open(html_file, "r").read()

        biotoptyp_id: QtWidgets.QLineEdit = dialog.findChild(QtWidgets.QLineEdit, "biotoptyp2_art_nr_orig")
        html_content = html_content.replace("__BTYP__", biotoptyp_id.text())

        code2012: QtWidgets.QLineEdit = dialog.findChild(QtWidgets.QLineEdit, "lineEditCode2010")
        html_content = html_content.replace("__CODE_2012__", code2012.text())

        name2012: QtWidgets.QComboBox = dialog.findChild(QtWidgets.QComboBox, "biotoptyp2_art_nr")
        html_content = html_content.replace("__BIOTOPTYPE2_ART_NR__", name2012.currentText())

        name: QtWidgets.QLineEdit = dialog.findChild(QtWidgets.QLineEdit, "name")
        html_content = html_content.replace("__BIOTOPNAME__", name.text())

        flaeche: QtWidgets.QLineEdit = dialog.findChild(QtWidgets.QLineEdit, "lineEditFlaeche")
        # Convert the area to integer to show the sqr meter as integer
        html_content = html_content.replace("__FLAECHE__", str(int(float(flaeche.text()))))

        erhaltungszustand: QtWidgets.QComboBox = dialog.findChild(QtWidgets.QComboBox, "erhaltungszustand")
        html_content = html_content.replace("__ERHALTUNGSZUSTAND__", erhaltungszustand.currentText())

        schutzstatus: QtWidgets.QComboBox = dialog.findChild(QtWidgets.QComboBox, "schutzstatus")
        html_content = html_content.replace("__SCHUTZSTATUS__", schutzstatus.currentText())

        beschreibung: QtWidgets.QPlainTextEdit = dialog.findChild(QtWidgets.QPlainTextEdit, "beschreibung")
        html_content = html_content.replace("__BESCHREIBUNG__", beschreibung.toPlainText())

        for column, attribute in zip(columns, attributes):
            if attribute is None:
                attribute = ""
            if column == "objnr":
                html_content = html_content.replace("__OBJNR__", str(attribute))
            if column == "beschreibung":
                html_content = html_content.replace("__BESCHREIBUNG__", str(attribute))
            if column == "pflege_entwicklung":
                html_content = html_content.replace("__PFLEGE_ENTWICKLUNG__", str(attribute))
            if column == "erfassung_wann":
                html_content = html_content.replace("__ERFASSUNG_WANN__", str(attribute).split(" ")[0])
            # Removed because of DSGVO
            # if column == "erfassung_wer":
            #     html_content = html_content.replace("__ERFASSUNG_WER__", str(attribute))
            if column == "bekanntmachung_wann":
                html_content = html_content.replace("__BEKANNTMACHUNG_WANN__", str(attribute).split(" ")[0])
            if column == "geprueft":
                string = "Nein"
                if attribute == "true":
                    string = "Ja"
                html_content = html_content.replace("__GEPRUEFT__", string)
            if column == "biotoptyp2_art_nr":
                string = "Nein"
                if attribute == "true":
                    string = "Ja"
                html_content = html_content.replace("__WALDBIOTOP__", string)
            if column == "pflege_zustand":
                # Attention: The column pflegezustand has 2 diferent values at the moment
                # The old string values "2:schlecht" and the new approach using a an integer value and the lookup table
                # The lookup table is as follows:
                lookup = {"0": "gut", "1":"mäßig", "2":"schlecht", None:"Keine Angaben", "NULL":"Keine Angaben"}

                if attribute is None:
                    value = "Keine Angabe"
                else:
                    value = lookup.get(attribute, "Keine Angabe")

                html_content = html_content.replace("__PFLEGE_ZUSTAND__", value)
            if column == "pflege_bedarf":
                string = "Nein"
                if attribute == "true":
                    string = "Ja"
                html_content = html_content.replace("__PFLEGE_BEDARF__", string)

        pflege: QtWidgets.QTableWidget = dialog.findChild(QtWidgets.QTableWidget, "pflege")

        massnahmen = []
        for col in range(pflege.columnCount()):
            for row in range(pflege.rowCount()):
                item: QTableWidgetItem = pflege.item(row, col)
                if item:
                    if item.checkState() == Qt.Qt.Checked:
                        massnahmen.append(f"<p>{item.text()}</p>")

        content = "\n".join(massnahmen)
        html_content = html_content.replace("__MASSNAHMEN__", content)
        return html_content

    def fill_html_widget() -> None:
        browser: QtWidgets.QTextBrowser = dialog.findChild(QtWidgets.QTextBrowser, "textBrowserPdfExport")
        html_content = generate_html()
        browser.setHtml(html_content)

    def select_pflege_items(index):
        """Select pflege items in the pflege table that are dependent on the biotoptyp"""

        pflege: QtWidgets.QTableWidget = dialog.findChild(QtWidgets.QTableWidget, "pflege")
        biotoptyp2_art_nr: QtWidgets.QComboBox = dialog.findChild(QtWidgets.QComboBox, "biotoptyp2_art_nr")

        if not biotoptyp2_art_nr.currentText():
            return

        # Select the column of the massnahmen table that must be selected
        statement = f"SELECT lr_gr FROM {conf.references_schema}.{conf.biotoptyp_table} WHERE " \
                    f"name_2012 = '{biotoptyp2_art_nr.currentText()}';"
        conn.execute(statement=statement)
        result = conn.fetch_one()
        if not result:
            return
        column = result[0]

        # Select the massnahmen that should be selected from the pflege table
        statement = f"SELECT massnahme FROM {conf.references_schema}.massnahmen WHERE {column.lower()} = 1"
        conn.execute(statement=statement)
        result = conn.fetch_all()
        if not result:
            return

        massnahmen = [massnahme[0] for massnahme in result]

        for col in range(pflege.columnCount()):
            for row in range(pflege.rowCount()):
                item = pflege.item(row, col)
                if item:
                    if item.text() not in massnahmen:
                        item.setFlags(Qt.Qt.NoItemFlags)

    def export_pdf():
        """Export the content of the HTML text browser as PDF"""
        filename = QtWidgets.QFileDialog.getSaveFileName(dialog, 'Neue PDF Datei auswählen', '.', '*.pdf')
        if filename and filename[0]:
            html_content = generate_html()
            convert_html_to_pdf(html=html_content, filename=filename[0])

    def export_html():
        """Export the content to HTML and open it into a browser"""

        temp_dir = tempfile.gettempdir()

        filename = "index.html"
        index_file = os.path.join(temp_dir, filename)

        source_path = os.path.join(os.path.dirname(common.__file__), "gui")
        html_content = generate_html()
        # Copy the pictures
        copyfile(os.path.join(source_path, "Logo_1.png"), os.path.join(temp_dir, "Logo_1.png"))
        copyfile(os.path.join(source_path, "Logo_2.png"), os.path.join(temp_dir, "Logo_2.png"))
        filedescr = open(index_file, "w", encoding='utf-8')
        filedescr.write(html_content)
        filedescr.close()

        webbrowser.open_new(index_file)

    def export_csv():
        """Export the content of the table as CSV"""
        filename = QtWidgets.QFileDialog.getSaveFileName(dialog, 'Neue CSV Datei auswählen', '.', '*.csv')
        if filename and filename[0]:
            table: QTableWidget = dialog.findChild(QtWidgets.QTableWidget, "tableWidgetCsvExport")
            outfile = open(filename[0], "w")

            values = []
            for column in range(table.columnCount()):
                column = table.item(0, column)

                if column:
                    values.append(column.text())
                else:
                    values.append(None)

            writer = csv.writer(outfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_ALL)
            writer.writerow(values)
            outfile.close()

    # Area handling
    flaeche = dialog.findChild(QtWidgets.QLineEdit, "lineEditFlaeche")
    if flaeche:
        flaeche.setText("%0.2f"%feature.geometry().area())

    umfang = dialog.findChild(QtWidgets.QLineEdit, "lineEditUmfang")
    if umfang:
        umfang.setText("%0.2f"%feature.geometry().length())

    # Handling of unique identifier
    ogc_fid = dialog.findChild(QtWidgets.QLineEdit, "ogc_fid")
    if ogc_fid:
        if not ogc_fid.text() or "nextval" in ogc_fid.text() or ogc_fid.text() == "NULL":
            ogc_fid.setText(str(bm.get_next_biotop_id()))

    # Generate a new object number
    objnr = dialog.findChild(QtWidgets.QLineEdit, "objnr")
    if objnr:
        if not objnr.text() or objnr.text() == "NULL":
            objnr.setText("14522-" + str(200000 + int(ogc_fid.text())))

    # Connect the trigger signals of the buttons to the export functions
    csv_export_button: QtWidgets.QPushButton = dialog.findChild(QtWidgets.QPushButton, "pushButtonCsvExport")
    if csv_export_button:
        csv_export_button.clicked.connect(export_csv)
    html_create_button: QtWidgets.QPushButton = dialog.findChild(QtWidgets.QPushButton, "pushButtonCreateHtml")
    if html_create_button:
        html_create_button.clicked.connect(fill_html_widget)
    html_export_button: QtWidgets.QPushButton = dialog.findChild(QtWidgets.QPushButton, "pushButtonExportHtml")
    if html_export_button:
        html_export_button.clicked.connect(export_html)
    pdf_export_button: QtWidgets.QPushButton = dialog.findChild(QtWidgets.QPushButton, "pushButtonPdfExport")
    if pdf_export_button:
        pdf_export_button.clicked.connect(export_pdf)
    biotoptyp2_art_nr: QtWidgets.QComboBox = dialog.findChild(QtWidgets.QComboBox, "biotoptyp2_art_nr")
    if biotoptyp2_art_nr:
        biotoptyp2_art_nr.currentIndexChanged.connect(select_pflege_items)

    # Set the correct pflege items if case they will be edited
    select_pflege_items(1)

    # Set the old data stoerungen and gefahr
    gefahr: QtWidgets.QPlainTextEdit = dialog.findChild(QtWidgets.QPlainTextEdit, "plainTextEditStoerungUndGefahr")
    if gefahr:
        try:
            x = feature['stoer_gefahrlvl_gefahrhist']
            x = str(x)
            x = x.replace('{','')
            x = x.replace('"','')
            x = x.replace('}','')
            x = x.split('_')

            count = 0
            content = ""
            content += str('Störungen: ')
            for i in x:
                count += 1
                if count == 1:
                    i = i.split(',')
                    for ii in i:
                        content += str(ii + ', ')
                    content = content[:-2]
                if count == 2:
                    content += str('\nGefahrlevel: ')
                    content += str(i)
                if count == 3:
                    content += str('\nGefahr (historisch): ')
                    i = i.split(',')
                    for ii in i:
                        content += str(ii+ ', ')
                    content = content[:-2]
            gefahr.setPlainText(content)
        except:
            pass

    # Feature id with 0 is invalid
    if tabWidget and feature.id() != 0:
        # Figure out if you are in the history, original or temporary table
        # and set the table and pkey names
        if layer.name() == conf.biotop_layer_name:
            table = f"{conf.biotope_schema}.{conf.biotope_table_name}"
            pkey = conf.biotope_primary_key
            tabWidget.setTabEnabled(3, True)
            fill_csv_table_widget(dialog=dialog, attributes=attributes, columns=columns)
        elif layer.name() == conf.biotop_edit_layer_name:
            table = f"{user.edit_table_name}"
            pkey = conf.biotope_primary_key
            tabWidget.setTabEnabled(4, True)
            fill_csv_table_widget(dialog=dialog, attributes=attributes, columns=columns)
        else:
            table = f"{conf.history_schema}.{conf.historie_table_name}"
            pkey = conf.history_primary_key
            tabWidget.setTabEnabled(4, False)

        # Get the original biotoptyp ids to fill the dependent fields in the gui
        if pkey in feature.fields().names():
            statement = f"SELECT biotoptyp2_art_nr, biotoptyp_art_nr " \
                        f"FROM {table} WHERE {pkey} = {feature[pkey]}"
            conn.execute(statement)
            conn.commit()
            result = conn.fetch_one()

            if not result:
                return

            # Fill the additional biotoptyp metadata in the form
            biotoptyp2_art_nr = result[0]

            if result[0] is None:
                return

            biotoptyp_art_nr = result[1]

            biotoptyp2_art_nr_orig = dialog.findChild(QtWidgets.QLineEdit, "biotoptyp2_art_nr_orig")
            biotoptyp_art_nr_orig = dialog.findChild(QtWidgets.QLineEdit, "biotoptyp_art_nr_orig")
            lineEditCode2002 = dialog.findChild(QtWidgets.QLineEdit, "lineEditCode2002")
            lineEditCode2010 = dialog.findChild(QtWidgets.QLineEdit, "lineEditCode2010")
            lineEditVwV2002 = dialog.findChild(QtWidgets.QLineEdit, "lineEditVwV2002")
            lineEditVwV2010 = dialog.findChild(QtWidgets.QLineEdit, "lineEditVwV2010")
            lineEditSchutz2010 = dialog.findChild(QtWidgets.QLineEdit, "lineEditSchutz2010")
            lineEditBiotopArtNr = dialog.findChild(QtWidgets.QLineEdit, "lineEditBiotopArtNr") # The line edit that shows the old name of the biotop

            if not biotoptyp2_art_nr_orig:
                return

            statement = f"SELECT btyp, code_2002, code_2012, vwv_2002, vwv_2012, schutz, name_2002 " \
                        f"FROM {conf.references_schema}.{conf.biotoptyp_table} " \
                        f"WHERE nummer = {biotoptyp2_art_nr}"
            conn.execute(statement)
            conn.commit()
            result = conn.fetch_one()

            if not result:
                return

            if biotoptyp2_art_nr is not None:
                biotoptyp2_art_nr_orig.setText(str(result[0]))
            if biotoptyp_art_nr is not None:
                biotoptyp_art_nr_orig.setText(str(biotoptyp_art_nr))
            if result[1] is not None:
                lineEditCode2002.setText(str(result[1]))
            if result[2] is not None:
                lineEditCode2010.setText(str(result[2]))
            if result[3] is not None:
                lineEditVwV2002.setText(str(result[3]))
            if result[4] is not None:
                lineEditVwV2010.setText(str(result[4]))
            if result[5] is not None:
                lineEditSchutz2010.setText(str(result[5]))
            if result[6] is not None:
                # Set the old number of the biotop
                lineEditBiotopArtNr.setText(str(result[6]))


def fill_csv_table_widget(dialog: QDialog, attributes: list, columns: list) -> None:
    """Fill the csv table widget with the data of the current feature

    Args:
        dialog: The attribute dialog
        layer: The vector layer
        feature: The feature

    """

    table: QTableWidget = dialog.findChild(QtWidgets.QTableWidget, "tableWidgetCsvExport")
    if table:
        table.setRowCount(1)
        table.setColumnCount(len(columns))
        table.setHorizontalHeaderLabels(columns)

        for index, value in enumerate(attributes):
            if value is not None:
                table.setItem(0, index, QTableWidgetItem(str(value)));


