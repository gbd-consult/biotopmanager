# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BiotopManagerDialog
                                 A QGIS plugin
 Dieses Plugin verwaltet Biotope
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-06-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Geoinformatikbüro Dassau GmbH
        email                : info@gbd-consult.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import traceback
import pprint

from PyQt5 import uic, QtCore, QtGui
from PyQt5 import QtWidgets
from qgis.core import QgsFeature, QgsFeatureRequest, QgsExpression
from qgis.gui import QgsHighlight, QgsAttributeForm
from biotopmanager.common.database_connection import DatabaseConnection
from biotopmanager.common.layer_manager import LayerManager
from biotopmanager.common.configuration import Configuration

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'assets/ui/biotope_historie.ui'))


class BiotopManagerHistoryDialog(QtWidgets.QMainWindow, FORM_CLASS):

    def __init__(self, iface, parent=None):
        """Constructor."""
        super(BiotopManagerHistoryDialog, self).__init__(parent)

        self.setupUi(self)

        self._iface = iface
        self._canvas = iface.mapCanvas()
        self._lm = LayerManager()
        self._db_conn = DatabaseConnection()
        self._conf = Configuration()

        self._current_highlight = None
        self._current_feature = None
        self._biotope_layer = self._lm.biotope_layer
        self._deleted_layer = self._lm.biotope_deleted_layer
        self._history_layer = self._lm.history_layer
        self._highlight_layer = self._lm.history_layer
        self._attribute_widget = None

        self.treeWidget.itemClicked.connect(self.show_selected_object)
        # self.treeWidget.itemDoubleClicked.connect(self.zoom_to_object)
        self.actionShow_History_for_Selektion.triggered.connect(self.load_selected_object)
        self.actionDelete_Selection.triggered.connect(self.delete_highlight)
        self.actionZoomToFeature.triggered.connect(self.zoom_to_object)

    def load_selected_object(self, *args):
        """Load the history of the selected object

        :return:
        """
        # make sure that the tree widget is empty
        self.treeWidget.clear()
        if self._current_highlight:
            self._current_highlight.hide()
            self._current_highlight = None

        if not self._biotope_layer:
            return

        try:
            self.setCursor(QtCore.Qt.WaitCursor)

            active_layer = self._iface.activeLayer()

            if not active_layer:
                return

            if active_layer.name() == self._biotope_layer.name():
                sf = self._biotope_layer.selectedFeatures()
            elif active_layer.name() == self._deleted_layer.name():
                sf = self._deleted_layer.selectedFeatures()
            else:
                return

            if len(sf) > 100:
                QtWidgets.QMessageBox.critical(self, "Fehler", f"Es können maximal nur 100 Biotope in den "
                                                               f"Historiendialog geladen werden. "
                                                               f"Es wurden jedoch {len(sf)} Biotope selektiert.")
                return

            if sf:
                for feature in sf:

                    root_level_item = QtWidgets.QTreeWidgetItem(self.treeWidget)
                    root_level_item.setText(0, str(feature[self._conf.biotope_identifier]))
                    # root_level_item.setText(0, str(feature[self._conf.biotope_primary_key]))

                    statement = "SELECT revision, %(key)s, modtime, action, %(identifer)s " \
                                "FROM %(schema)s.%(table)s " \
                                "WHERE %(key)s = %(id)s " \
                                "ORDER BY modtime ASC;"%{"table":self._conf.historie_table_name,
                                                         "schema": self._conf.history_schema,
                                                         "key":self._conf.biotope_primary_key,
                                                         "id":feature[self._conf.biotope_primary_key],
                                                         "identifer":self._conf.biotope_identifier}

                    self._db_conn.execute(statement)
                    self._db_conn.commit()
                    results = self._db_conn.fetch_all()
                    if results:

                        has_i = False
                        has_u = False
                        has_d = False

                        # Add the unique ids to the object ree that were found in the database
                        for result in results:
                            if result[3] == "I":
                                has_i = True
                            if result[3] == "U":
                                has_u = True
                            if result[3] == "D":
                                has_d = True

                        if has_i is True:
                            insert_item = QtWidgets.QTreeWidgetItem(root_level_item)
                            insert_item.setText(0, "Erzeugt")
                        if has_u is True:
                            update_item = QtWidgets.QTreeWidgetItem(root_level_item)
                            update_item.setText(0, "Modifiziert")
                        if has_d is True:
                            delete_item = QtWidgets.QTreeWidgetItem(root_level_item)
                            delete_item.setText(0, "Archiviert")

                        # Add the unique ids to the object ree that were found in the database
                        for result in results:
                            d = result[2].replace(microsecond=0)

                            if result[3] == "I":
                                second_level_item = QtWidgets.QTreeWidgetItem(insert_item)
                                second_level_item.setText(0, str(result[4]))
                                second_level_item.setText(1, str(d))
                                second_level_item.setText(2, str(result[0]))
                                insert_item.insertChild(0, second_level_item)
                                second_level_item.setExpanded(True)
                            if result[3] == "U":
                                second_level_item = QtWidgets.QTreeWidgetItem(update_item)
                                second_level_item.setText(0, str(result[4]))
                                second_level_item.setText(1, str(d))
                                second_level_item.setText(2, str(result[0]))
                                update_item.insertChild(0, second_level_item)
                                second_level_item.setExpanded(True)
                            if result[3] == "D":
                                second_level_item = QtWidgets.QTreeWidgetItem(delete_item)
                                second_level_item.setText(0, str(result[4]))
                                second_level_item.setText(1, str(d))
                                second_level_item.setText(2, str(result[0]))
                                delete_item.insertChild(0, second_level_item)
                                second_level_item.setExpanded(True)

                        if has_i is True:
                            root_level_item.insertChild(0, insert_item)
                            insert_item.setExpanded(True)
                        if has_u is True:
                            root_level_item.insertChild(1, update_item)
                            update_item.setExpanded(True)
                        if has_d is True:
                            root_level_item.insertChild(2, delete_item)
                            delete_item.setExpanded(True)

                    root_level_item.setExpanded(True)

                    self.treeWidget.insertTopLevelItem(0, root_level_item)
        except Exception as e:
            e_type, e_value, e_traceback = sys.exc_info()
            mobj = [e.__class__, e_type, e_value, traceback.format_tb(e_traceback)]
            message = pprint.pformat(mobj)
            QtWidgets.QMessageBox.critical(self, "Fehler", str(message))
        finally:
            self.setCursor(QtCore.Qt.ArrowCursor)

    def show_selected_object(self, item, column):

        self._current_feature = None

        if not item:
            return

        unique_id = item.text(2)

        if not unique_id:
            return

        self.setCursor(QtCore.Qt.WaitCursor)

        try:
            it = self._history_layer.getFeatures(QgsFeatureRequest(QgsExpression(f"revision = {unique_id}")))
            for feature in it:
                if self._attribute_widget:
                    del self._attribute_widget
                self._attribute_widget = QgsAttributeForm(self._history_layer, feature)
                self.splitter.replaceWidget(1, self._attribute_widget)
                self.splitter.update()
                self.highlight_feature(feature=feature)
                self._current_feature = feature
        except Exception as e:
            e_type, e_value, e_traceback = sys.exc_info()
            mobj = [e.__class__, e_type, e_value, traceback.format_tb(e_traceback)]
            message = pprint.pformat(mobj)
            QtWidgets.QMessageBox.critical(self, "Fehler", str(message))
        finally:
            self.setCursor(QtCore.Qt.ArrowCursor)

    def highlight_feature(self, feature: QgsFeature):

        if self._current_highlight:
            self._current_highlight.hide()

        self._current_highlight = QgsHighlight(self._canvas, feature.geometry(), self._history_layer)

        self._current_highlight.setColor(QtGui.QColor(255,0,0,100))
        self._current_highlight.setWidth(4)
        self._current_highlight.setFillColor(QtGui.QColor( 0,0,0,0))


    def delete_highlight(self):

        if self._current_highlight:
            self._current_highlight.hide()
            self._current_highlight = None

    def zoom_to_object(self):

        if self._current_feature is not None:
            self._canvas.zoomToFeatureIds(self._highlight_layer, [self._current_feature.id(), ])
            return
